# -*- coding: utf-8 -*-
"""
build_chroma_db.py
- cleaned_merged_tags.csv ÌååÏùºÏùÑ Î°úÎìúÌï©ÎãàÎã§.
- 'genre_tags'ÏôÄ 'mood_tags'Î•º Í≤∞Ìï©ÌïòÏó¨ ÏûÑÎ≤†Îî©Ìï† ÌÖçÏä§Ìä∏(page_content)Î•º ÎßåÎì≠ÎãàÎã§.
- 'TRACK_ID', 'PATH' Îì±ÏùÄ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞(metadata)Î°ú Ï†ÄÏû•Ìï©ÎãàÎã§.
- LangChainÍ≥º ChromaDBÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Î≤°ÌÑ∞ DBÎ•º Íµ¨Ï∂ïÌïòÍ≥† ÎîîÏä§ÌÅ¨Ïóê Ï†ÄÏû•Ìï©ÎãàÎã§.
"""

import os
import pandas as pd
from tqdm import tqdm
from langchain_community.vectorstores import Chroma
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_core.documents import Document

# =========================================================
# 1. ÏÑ§Ï†ï
# =========================================================
# ÏûÖÎ†• ÌÅ¥Î¶∞ Îç∞Ïù¥ÌÑ∞
INPUT_CSV = "jamendo/data/cleaned_merged_tags.csv"
# ChromaDBÎ•º Ï†ÄÏû•Ìï† Ìè¥Îçî
DB_PERSIST_DIR = "rag/chroma_db"
# ChromaDB Ïª¨Î†âÏÖò Ïù¥Î¶Ñ (ÌÖåÏù¥Î∏î Ïù¥Î¶ÑÍ≥º Ïú†ÏÇ¨)
COLLECTION_NAME = "jamendo_songs"
# Agent 3Ïùò ÌÇ§ÏõåÎìúÏôÄ ÎèôÏùºÌïú ÏûÑÎ≤†Îî© Î™®Îç∏ ÏÇ¨Ïö© (Îß§Ïö∞ Ï§ëÏöî)
EMBED_MODEL_NAME = "all-MiniLM-L6-v2"

# =========================================================
# 2. Îç∞Ïù¥ÌÑ∞ Î°úÎìú Î∞è LangChain DocumentÎ°ú Î≥ÄÌôò
# =========================================================
def load_and_prepare_documents(csv_path: str) -> list[Document]:
    """CSVÎ•º Î°úÎìúÌïòÏó¨ LangChain Document Î¶¨Ïä§Ìä∏Î°ú Î≥ÄÌôòÌï©ÎãàÎã§."""
    
    print(f"üîÑ Loading cleaned data from: {csv_path}")
    if not os.path.exists(csv_path):
        print(f"‚ùå Input file not found: {csv_path}")
        return []
        
    df = pd.read_csv(csv_path)
    # Í≤∞Ï∏°Í∞í(NaN)Ïù¥ ÏûàÏùÑ Í≤ΩÏö∞Î•º ÎåÄÎπÑÌï¥ Îπà Î¨∏ÏûêÏó¥Î°ú ÎåÄÏ≤¥
    df = df.fillna('')
    print(f"   -> Loaded {len(df)} songs.")

    documents = []
    print("üìÑ Converting DataFrame rows to LangChain Documents...")
    
    for _, row in tqdm(df.iterrows(), total=df.shape[0]):
        # 1. ÏûÑÎ≤†Îî©Îê† ÌÖçÏä§Ìä∏ (page_content)
        #    RAGÍ∞Ä Í≤ÄÏÉâÌï† ÎåÄÏÉÅÏù¥ ÎêòÎäî ÌÖçÏä§Ìä∏ (Ïû•Î•¥ + Î¨¥Îìú)
        content_text = f"Genre: {row['genre_tags']}. Mood: {row['mood_tags']}".strip()
        
        # 2. Í≤ÄÏÉâ ÌõÑ Î∞òÌôòÎê† Ï†ïÎ≥¥ (metadata)
        #    RAGÍ∞Ä Í≤ÄÏÉâÌïú ÌõÑ, Ïö∞Î¶¨Í∞Ä Ïã§Ï†úÎ°ú ÏÇ¨Ïö©Ìï† ÎÖ∏Îûò Ï†ïÎ≥¥
        metadata = {
            "track_id": row['TRACK_ID'],
            "path": row['PATH'],
            "genre_tags": row['genre_tags'],
            "mood_tags": row['mood_tags']
        }
        
        # LangChain Document Í∞ùÏ≤¥ ÏÉùÏÑ±
        doc = Document(page_content=content_text, metadata=metadata)
        documents.append(doc)
        
    print(f"   -> Created {len(documents)} documents.")
    return documents

# =========================================================
# 3. ÏûÑÎ≤†Îî© Î™®Îç∏ Î°úÎìú
# =========================================================
from langchain_huggingface import HuggingFaceEmbeddings

def load_embedding_model(model_name: str):
    """HuggingFace ÏûÑÎ≤†Îî© Î™®Îç∏ÏùÑ LangChain ÌòïÏãùÏúºÎ°ú Î°úÎìúÌï©ÎãàÎã§."""
    print(f"üöÄ Loading embedding model ({model_name})...")
    # device='auto'Î°ú ÏÑ§Ï†ïÌïòÏó¨ GPUÍ∞Ä ÏûàÏúºÎ©¥ ÏûêÎèôÏúºÎ°ú ÏÇ¨Ïö©
    embeddings = HuggingFaceEmbeddings(
        model_name=model_name,
        encode_kwargs={'normalize_embeddings': True} # ÏΩîÏÇ¨Ïù∏ Ïú†ÏÇ¨ÎèÑÎ•º ÏúÑÌï¥ Ï†ïÍ∑úÌôî
    )
    print("   -> Model loaded.")
    return embeddings

# =========================================================
# 4. ChromaDB ÏÉùÏÑ± Î∞è Ï†ÄÏû•
# =========================================================
def build_and_persist_db(documents: list[Document], embeddings, db_path: str, collection_name: str):
    """
    LangChain Document Î¶¨Ïä§Ìä∏Î•º ChromaDBÏóê ÏûÑÎ≤†Îî©ÌïòÍ≥† Ï†ÄÏû•Ìï©ÎãàÎã§.
    """
    if not documents:
        print("‚ùå No documents to process. Exiting.")
        return

    print(f"üõ†Ô∏è  Building ChromaDB (this may take a while)...")
    print(f"   -> DB will be saved to: {db_path}")

    # Chroma.from_documents:
    # 1. documents Î¶¨Ïä§Ìä∏Ïùò 'page_content'Î•º 'embeddings' Î™®Îç∏Î°ú Î≤°ÌÑ∞ Î≥ÄÌôò
    # 2. Î≤°ÌÑ∞ÏôÄ 'metadata'Î•º 'collection_name'Ïóê Ï†ÄÏû•
    # 3. 'persist_directory' Í≤ΩÎ°úÏóê DB ÌååÏùº Ï†ÄÏû•
    vector_db = Chroma.from_documents(
        documents=documents,
        embedding=embeddings,
        collection_name=collection_name,
        persist_directory=db_path
    )
    
    # (Ïù¥ÎØ∏ from_documentsÏóêÏÑú persistÍ∞Ä Ìò∏Ï∂úÎêòÏßÄÎßå, Î™ÖÏãúÏ†ÅÏúºÎ°ú Ìïú Î≤à Îçî Ìò∏Ï∂ú)
    vector_db.persist()
    print(f"\n‚úÖ ChromaDB built and saved successfully!")
    print(f"   -> Total vectors in collection '{collection_name}': {vector_db._collection.count()}")

# =========================================================
# 5. Î©îÏù∏ Ïã§Ìñâ
# =========================================================
if __name__ == "__main__":
    # 1. Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
    docs = load_and_prepare_documents(INPUT_CSV)
    
    if docs:
        # 2. ÏûÑÎ≤†Îî© Î™®Îç∏ Î°úÎìú
        embedding_function = load_embedding_model(EMBED_MODEL_NAME)
        
        # 3. DB Íµ¨Ï∂ï Î∞è Ï†ÄÏû•
        build_and_persist_db(
            documents=docs,
            embeddings=embedding_function,
            db_path=DB_PERSIST_DIR,
            collection_name=COLLECTION_NAME
        )